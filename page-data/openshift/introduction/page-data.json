{
    "componentChunkName": "component---src-pages-openshift-introduction-mdx",
    "path": "/openshift/introduction/",
    "result": {"pageContext":{"frontmatter":{"title":"Introduction","description":"Introduction"},"relativePagePath":"/openshift/introduction.mdx","titleType":"page","MdxNode":{"id":"0b7e39d9-a3d9-5539-9d13-e9156b08a918","children":[],"parent":"7b881e7f-53e7-5abe-900e-5990498dc52f","internal":{"content":"---\ntitle: Introduction\ndescription: Introduction\n---\n\nThis section provides information related to the tuning of IBM® Cúram Social Program Management (SPM) deployed on cloud environments such as the OpenShift Container Platform (OCP).\n\n> The configurable parameters and tuning values listed are for guidance purposes only. These configurable parameters and values are a suggested starting point and are not definitive. Clients should perform their own testing to validate and verify their own settings, in order to meet their system needs.\n\n> While the starter configurable parameters and values are based on experience and are sensible for production, it is unlikely they are the configuration for your specific system. **Therefore, it is strongly recommended these configurations are further tuned during your load testing and production monitoring.**\n\nThe parameters are key to the performance of Social Program Management on WebSphere®\nLiberty (WLP) application server running on Kubernetes. Refine the values during load testing of the system and during monitoring of production. A load test phase in the project is highly recommended.\n\n<AnchorLinks small>\n  <AnchorLink>Architecture</AnchorLink>\n  <AnchorLink>What are JMS producers and JMS consumers?</AnchorLink>\n  <AnchorLink>Helm Charts</AnchorLink>\n  <AnchorLink>Passing Values</AnchorLink>\n  <AnchorLink>Parameters</AnchorLink>\n</AnchorLinks>\n\n<InlineNotification>\n\nPlease note as a complex software product actual results may vary, based on a broad range of implementation specific factors, such as Cúram modifications and customization, transaction mix, hardware platform, third party software and database size.\n\n</InlineNotification>\n\n## Architecture\n\nAs a platform for Social Programs, SPM allows customers to configure and customize their deployments according to their own requirements.\n\nThe tuning parameters presented are for illustrative purpose only, therefore it is important to understand how the components interconnect with each other by\nreviewing the [Architecture Overview](https://ibm.github.io/spm-kubernetes/architecture/arch-overview/architecture-overview)\nand by performing adequate workload exercises to determine the optimal values for each deployment.\n\n### What are JMS producers and JMS consumers?\n\nTo mitigate against the risk of thread exhaustion, the client HTTP initiated transactions and JMS initiated transactions run on different WebSphere Liberty instances, integrated through a messaging engine (IBM MQ).\n\nThe Application/EAR responsible for processing client HTTP initiated transactions is called the JMS Producer and has JMS message consumption through EJB MDBs disabled.\n\nThe Application/EAR responsible for processing JMS initiated transactions is called the JMS Consumer and has JMS message consumption through EJB MDBs enabled.\n\nThis resolution is part of a multi-faceted solution, with client HTTP initiated transactions and JMS initiated transactions isolated from each other, and the implementation of local interfaces.\n\nFor more information please review the SPM [Transaction isolation](https://www.ibm.com/docs/en/spm/8.0.0?topic=architecture-transaction-isolation) topic.\n\n## Helm Charts\n\nThe values and parameters presented in this document apply to the Helm Charts distributed in the [SPM-Kubernetes](https://github.com/IBM/spm-kubernetes/) repository.\n\n## Docker\n\nAs part of the [SPM Kubernetes containerization assets](https://github.com/IBM/spm-kubernetes) release, SPM has not embedded tuning within Dockerfiles.\nClients are free to update these docker files with their required tuning based on their requirements.\n\n## Passing Values\n\nThe Helm Charts expose parameters that can be accessed using the Values object, which users can override using an [value file](https://helm.sh/docs/chart_template_guide/values_files/).\n\nConsequently, in this guide the tuning of the components is made possible by passing values into the chart during deployment time.\n\nThe following command example shows a typical command to pass values during the deployment of the `spm` chart:\n\n```shell\nhelm install spm -f override-values.yaml\n```\n\n## Parameters\n\nThe parameters documented in this guide and in the [SPM Configuration Reference](https://ibm.github.io/spm-kubernetes/deployment/config-reference/)\nare referenced in a 'flat' manner to allow specifying which values to amend in a readable way.\n\nFor example, the value `global.images.imageTag` refers to the following in an override values file:\n\n```yaml\nglobal:\n  images:\n    imageTag: \"latest\"\n```\n","type":"Mdx","contentDigest":"3a490f270e1b207cd2530e81381eccab","owner":"gatsby-plugin-mdx","counter":108},"frontmatter":{"title":"Introduction","description":"Introduction"},"exports":{},"rawBody":"---\ntitle: Introduction\ndescription: Introduction\n---\n\nThis section provides information related to the tuning of IBM® Cúram Social Program Management (SPM) deployed on cloud environments such as the OpenShift Container Platform (OCP).\n\n> The configurable parameters and tuning values listed are for guidance purposes only. These configurable parameters and values are a suggested starting point and are not definitive. Clients should perform their own testing to validate and verify their own settings, in order to meet their system needs.\n\n> While the starter configurable parameters and values are based on experience and are sensible for production, it is unlikely they are the configuration for your specific system. **Therefore, it is strongly recommended these configurations are further tuned during your load testing and production monitoring.**\n\nThe parameters are key to the performance of Social Program Management on WebSphere®\nLiberty (WLP) application server running on Kubernetes. Refine the values during load testing of the system and during monitoring of production. A load test phase in the project is highly recommended.\n\n<AnchorLinks small>\n  <AnchorLink>Architecture</AnchorLink>\n  <AnchorLink>What are JMS producers and JMS consumers?</AnchorLink>\n  <AnchorLink>Helm Charts</AnchorLink>\n  <AnchorLink>Passing Values</AnchorLink>\n  <AnchorLink>Parameters</AnchorLink>\n</AnchorLinks>\n\n<InlineNotification>\n\nPlease note as a complex software product actual results may vary, based on a broad range of implementation specific factors, such as Cúram modifications and customization, transaction mix, hardware platform, third party software and database size.\n\n</InlineNotification>\n\n## Architecture\n\nAs a platform for Social Programs, SPM allows customers to configure and customize their deployments according to their own requirements.\n\nThe tuning parameters presented are for illustrative purpose only, therefore it is important to understand how the components interconnect with each other by\nreviewing the [Architecture Overview](https://ibm.github.io/spm-kubernetes/architecture/arch-overview/architecture-overview)\nand by performing adequate workload exercises to determine the optimal values for each deployment.\n\n### What are JMS producers and JMS consumers?\n\nTo mitigate against the risk of thread exhaustion, the client HTTP initiated transactions and JMS initiated transactions run on different WebSphere Liberty instances, integrated through a messaging engine (IBM MQ).\n\nThe Application/EAR responsible for processing client HTTP initiated transactions is called the JMS Producer and has JMS message consumption through EJB MDBs disabled.\n\nThe Application/EAR responsible for processing JMS initiated transactions is called the JMS Consumer and has JMS message consumption through EJB MDBs enabled.\n\nThis resolution is part of a multi-faceted solution, with client HTTP initiated transactions and JMS initiated transactions isolated from each other, and the implementation of local interfaces.\n\nFor more information please review the SPM [Transaction isolation](https://www.ibm.com/docs/en/spm/8.0.0?topic=architecture-transaction-isolation) topic.\n\n## Helm Charts\n\nThe values and parameters presented in this document apply to the Helm Charts distributed in the [SPM-Kubernetes](https://github.com/IBM/spm-kubernetes/) repository.\n\n## Docker\n\nAs part of the [SPM Kubernetes containerization assets](https://github.com/IBM/spm-kubernetes) release, SPM has not embedded tuning within Dockerfiles.\nClients are free to update these docker files with their required tuning based on their requirements.\n\n## Passing Values\n\nThe Helm Charts expose parameters that can be accessed using the Values object, which users can override using an [value file](https://helm.sh/docs/chart_template_guide/values_files/).\n\nConsequently, in this guide the tuning of the components is made possible by passing values into the chart during deployment time.\n\nThe following command example shows a typical command to pass values during the deployment of the `spm` chart:\n\n```shell\nhelm install spm -f override-values.yaml\n```\n\n## Parameters\n\nThe parameters documented in this guide and in the [SPM Configuration Reference](https://ibm.github.io/spm-kubernetes/deployment/config-reference/)\nare referenced in a 'flat' manner to allow specifying which values to amend in a readable way.\n\nFor example, the value `global.images.imageTag` refers to the following in an override values file:\n\n```yaml\nglobal:\n  images:\n    imageTag: \"latest\"\n```\n","fileAbsolutePath":"/home/travis/build/IBM/spm-performance-tuning/src/pages/openshift/introduction.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2610115429","2746626797","3037994772","768070550"]}