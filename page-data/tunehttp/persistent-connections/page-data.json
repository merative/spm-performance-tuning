{
    "componentChunkName": "component---src-pages-tunehttp-persistent-connections-mdx",
    "path": "/tunehttp/persistent-connections/",
    "result": {"pageContext":{"frontmatter":{"title":"Configuring persistent connections","description":"Configuring persistent connections","tabs":["HTTP Server","HTTP Caching","HTTP Compression","HTTP Monitoring","Persistent Connections","Thread Tuning"]},"relativePagePath":"/tunehttp/persistent-connections.mdx","titleType":"page","MdxNode":{"id":"1220f67f-ac43-5c9f-b5c5-2b1a8048a329","children":[],"parent":"68b474ef-c8f8-5b5b-962b-837b844f4b2f","internal":{"content":"---\ntitle: Configuring persistent connections\ndescription: Configuring persistent connections\ntabs: ['HTTP Server','HTTP Caching','HTTP Compression', 'HTTP Monitoring', 'Persistent Connections','Thread Tuning']\n---\n\nHTTP persistent connection or HTTP keepalive is a TCP feature that is used to reduce network congestion and CPU usage,\nin particular on systems that have lower hardware specifications. The feature allows multiple requests over a single connection.\nReusing a connection in this way is useful with secure HTTP because the same connection does not need to be renegotiated every time.\n\nThe following parameters in the `httpd.conf` file control persistent connections:\n\n```shell\nKeepAlive On\nMaxKeepAliveRequest 1000\nKeepAliveTimeOut 2\n```\n\nThe `KeepAliveTimeOut` parameter controls the amount of time that the server waits for the next request on a persistent connection.\nIf the value is too small, connections might not be reused efficiently. If the value is too large, web server threads might not\nbe used efficiently. We recommend starting by setting the value to 2 and then adjust it if necessary. It is suggested that\nyou keep this value lower than the average think time of the users of the system.\n\nRecent performance tests highlighted that some disadvantages occur when persistent connections are used with SPM application servers:\n\n* Intermittent blank or frozen application\n* Failure to load content after some time\n\nIn addition, we found that the WebSphere® Application Server (WAS) setting `WebServer Plug-in Properties-Connection Timeout` affects\nthe server's ability to handle heavy loads. When the feature is turned on, issues that arise include huge numbers of objects\nare created when the server is unable to handle the load, extreme resource utilization occurs on the server, and server failures occur.\n\nIf you experience any of the issues when you test your system with heavy loads, we recommend disabling the persistent Connections/keepalive feature.\n","type":"Mdx","contentDigest":"a60cbad3ffebf4e24b7e3cf141aa133f","owner":"gatsby-plugin-mdx","counter":123},"frontmatter":{"title":"Configuring persistent connections","description":"Configuring persistent connections","tabs":["HTTP Server","HTTP Caching","HTTP Compression","HTTP Monitoring","Persistent Connections","Thread Tuning"]},"exports":{},"rawBody":"---\ntitle: Configuring persistent connections\ndescription: Configuring persistent connections\ntabs: ['HTTP Server','HTTP Caching','HTTP Compression', 'HTTP Monitoring', 'Persistent Connections','Thread Tuning']\n---\n\nHTTP persistent connection or HTTP keepalive is a TCP feature that is used to reduce network congestion and CPU usage,\nin particular on systems that have lower hardware specifications. The feature allows multiple requests over a single connection.\nReusing a connection in this way is useful with secure HTTP because the same connection does not need to be renegotiated every time.\n\nThe following parameters in the `httpd.conf` file control persistent connections:\n\n```shell\nKeepAlive On\nMaxKeepAliveRequest 1000\nKeepAliveTimeOut 2\n```\n\nThe `KeepAliveTimeOut` parameter controls the amount of time that the server waits for the next request on a persistent connection.\nIf the value is too small, connections might not be reused efficiently. If the value is too large, web server threads might not\nbe used efficiently. We recommend starting by setting the value to 2 and then adjust it if necessary. It is suggested that\nyou keep this value lower than the average think time of the users of the system.\n\nRecent performance tests highlighted that some disadvantages occur when persistent connections are used with SPM application servers:\n\n* Intermittent blank or frozen application\n* Failure to load content after some time\n\nIn addition, we found that the WebSphere® Application Server (WAS) setting `WebServer Plug-in Properties-Connection Timeout` affects\nthe server's ability to handle heavy loads. When the feature is turned on, issues that arise include huge numbers of objects\nare created when the server is unable to handle the load, extreme resource utilization occurs on the server, and server failures occur.\n\nIf you experience any of the issues when you test your system with heavy loads, we recommend disabling the persistent Connections/keepalive feature.\n","fileAbsolutePath":"/home/travis/build/IBM/spm-performance-tuning/src/pages/tunehttp/persistent-connections.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2610115429","2746626797","3037994772","768070550"]}