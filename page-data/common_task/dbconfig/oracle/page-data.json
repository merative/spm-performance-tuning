{
    "componentChunkName": "component---src-pages-common-task-dbconfig-oracle-mdx",
    "path": "/common_task/dbconfig/oracle/",
    "result": {"pageContext":{"frontmatter":{"title":"Oracle","description":"Oracle","tabs":["Common","Db2","Oracle"]},"relativePagePath":"/common_task/dbconfig/oracle.mdx","titleType":"page","MdxNode":{"id":"a576936f-03c7-5676-aadb-af9625090283","children":[],"parent":"3ae957da-0e93-57b7-849a-ff8d56303a2b","internal":{"content":"---\ntitle: Oracle\ndescription: Oracle\ntabs: ['Common','Db2','Oracle']\n---\n\n<AnchorLinks small>\n  <AnchorLink>Physical database design</AnchorLink>\n  <AnchorLink>Initialization and tuning parameters for Oracle databases</AnchorLink>\n  <AnchorLink>Statistics</AnchorLink>\n</AnchorLinks>\n\nThe following maintenance and database design guidelines apply to tuning Oracle databases.\n\n<InlineNotification kind=\"warning\">\n\nDatabase tuning provided in this guidance is not comprehensive.\n\nHowever, the following values are a starting point for how to configure a performant database for IBM® Cúram Social Program Management.\nIt is our recommendation that project teams verify their own tuning, and where necessary adapt and expand the configuration based on their own requirements prior to going in to production.\n\n</InlineNotification>\n\n## Physical database design\n\nIn addition to physical database design that is done as part of the project, experience shows that the database\ndesign has benefits in reducing contention on hot index blocks (cache buffer chain). To achieve this benefit, create\na 2 K block table space for indexes, and move indexes to that 2 K block index table space.\n\n## Initialization and tuning parameters for Oracle databases\n\nThe application server for IBM® Cúram Social Program Management uses JDBC connection pooling and prepared statement caching.\nAt bare minimum, review and adjust the `PROCESSES` and `OPEN_CURSORS` parameters from the following list according to your system requirements.\n\nYou can use the following guidance when you are deciding which values to apply for `PROCESSES` and `OPEN_CURSORS` on your system.\nIn addition to these two basic parameters, check the parameters that are referenced in the following table, and adjust the parameters if necessary.\n\n### PROCESSES\n\n`PROCESSES` specifies the maximum number of operating system user processes that can simultaneously connect to Oracle.\nIts value must allow for all background processes such as locks, job queue processes, and parallel execution processes.\nThis parameter is operating system dependent. The default values of the `SESSIONS` and `TRANSACTIONS` parameters are derived\nfrom this parameter. If you change the value of `PROCESSES`, evaluate whether to adjust the values of those derived parameters.\n\nYou can use the following guidance to set a value for `PROCESSES`:\n\n```sql\nPROCESSES > MAX\n```\n\nwhere\n\n```sql\nMAX=NUMBER OF APPLICATION SERVERS * NUMBER OF POOLED JDBC CONNECTIONS\n```\n\nor\n\n```sql\nMAX=NUMBER OF BATCH STREAMS * 3\n```\n\n<InlineNotification>\n\n**Note:** Increasing the number of processes leads to greater memory consumption. Consult with your database administrator before you make any changes.\n\n</InlineNotification>\n\n### OPEN_CURSORS\n\nOracle creates a memory area (context area) for processing SQL statements. The value of `OPEN_CURSORS` must\nbe set high enough to prevent your application from running out of open cursors. Assuming that a session does\nnot open the number of cursors that are specified by `OPEN_CURSORS`, there is no added overhead to setting\nthis value higher than needed. The following guidance can be used to set a value for `OPEN_CURSORS`:\n\n```sql\nOPEN_CURSORS >= NUMBER OF OVERALL EXPECTED DBCONNECTIONS\n```\n\nor\n\n```sql\nOPEN_CURSORS > JDBC/CURAMDB PREPARED STATEMENT CACHE SIZE\n```\n\n### SESSIONS\n\nThis parameter modifies the number of sessions that are allowed by Oracle at database level.\n\n<InlineNotification>\n\n**Note:** Setting the number of allowed processes automatically sets the appropriate number of sessions, which is the\nrecommended way of tuning this parameter. Oracle does not recommend setting this parameter explicitly.\n\n</InlineNotification>\n\n### EVENTS\n\nThis parameter is used to reduce contention that is caused by LOB management. To identify the number of chunks to\nbe cleaned up each time a reclamation operation is performed, set `EVENT 44951` to a value in the range `1 - 1024`.\nIn turn, this parameter reduces the number of requests against the high watermark enqueue.\n\n### DB_BLOCK_SIZE\n\nThis parameter controls the size of the default data block size at the time of database creation. If the database exists,\nthis value cannot be changed: a new database needs to be created with a different block size. Since Oracle 10g Release 2,\neach table space can have a different block size.\n\nHowever, the block size still needs to be chosen wisely. Performance tests showed that decreasing the block size decreases threads contention. The `DB_BLOCK_SIZE` default value is `8192`. The value of this parameter must be a multiple of the physical block size at the device level.\n\nOur suggestion is to set the parameter to the lowest possible value.\n\n### DISK_ASYNCH_IO\n\nMuch CPU time can be wasted on asynchronous I/O on systems that support it. We suggest setting the `DISK_ASYNCH_IO` parameter to `FALSE`.\n\n<InlineNotification>\n\n**Note:** With `DISK_ASYNCH_IO` off, you should set the `DBWR_IO_SLAVES` parameter to a value other than its default of `0`, to simulate asynchronous I/O.\n\n</InlineNotification>\n\n### DBWR_IO_SLAVES\n\nThis parameter is relevant only on systems with only one database writer process (`DBW0`). It specifies the number of I/O\nserver processes that are used by the `DBW0` process. The `DBW0` process and its server processes always write to disk.\nBy default, the value is `0` and I/O server processes are not used. `DBWR_IO_SLAVES` should be set and tuned when\nsimulating asynchronous I/O, for example, with `DISK_ASYNCH_IO=FALSE`. Performance tests have shown that\nsetting `DBWR_IO_SLAVE` to `20` yields good performance.\n\nIn addition to the parameters mentioned previously, a number of other important Oracle tuning parameters are available\nthat you can review and adjust, if necessary. The following table summarizes the tuneable parameters.\n\n<Caption>\n\n*Table 1:* Oracle tuning parameters\n\n</Caption>\n\n| Tuning parameter  | Description and use  | Recommended value |\n| :---------------- | :------------------- | :----------------- |\n|`PROCESSES`|Specifies the maximum number of operating system user processes that can simultaneously connect to Oracle|`PROCESSES > MAX` where `MAX=NUMBER OF APPLICATION SERVERS * NUMBER OF POOLED JDBC CONNECTIONS` or  `MAX=NUMBER OF BATCH STREAMS * 3`|\n|`SESSIONS`|Modifies the number of sessions that are allowed by Oracle at database level.|<InlineNotification kind=\"warning\"> **Note:** Setting this parameter explicitly is not recommended. </InlineNotification>|\n|`OPEN_CURSORS`|Controls the size of the memory area (context area) for processing SQL statements.|`open_cursors >= number of overall expected dbconnections` or `open_cursors > jdbc/curamdb prepared statement cache size`|\n|`EVENTS`|Set to reduce contention caused by LOB management.|`SET EVENTS ='44951 TRACE NAME CONTEXT FOREVER, LEVEL 1024'`|\n|`DB_BLOCK_SIZE`|Controls the size of the default data block size at the time of database creation.|Set to the lowest possible value (2048): `DB_BLOCK_SIZE = 2048`|\n|`FAST_START_MTTR_TARGET`|Specifies the number of seconds that the database takes to perform crash recovery of a single instance. `FAST_START_MTTR_TARGET=60` for approximately 100 MB files. `FAST_START_MTTR_TARGET=300` for approximately 500 MB files. Check the size of log files with: `select * from V$LOG`|`FAST_START_MTTR_TARGET=300`|\n|`DISK_ASYNCH_IO`|Controls whether I/O to data files, control files, and log files is asynchronous.|`DISK_ASYNCH_IO=false`|\n|`DBWR_IO_SLAVES`|Specifies the number of I/O server processes that are used by the DBW0 process.|`DBWR_IO_SLAVES = 20`|\n|`DB_WRITER_PROCESSES`|`DB_WRITER_PROCESSES` (DBWR) manages the \"dirty block\" cleanouts from the data buffer. Very few tuning options exist except adjusting the number of DBWR processes.`DB_WRITER_PROCESSES` cannot exceed a value of 20.|The default value is the larger value of either: `DB_WRITER_PROCESSES = 1` or `CPU_COUNT/8`|\n|`IDLE_TIME`|Set to greater or equal to the timeout that is set on WebSphere® Application Server.|`ALTER PROFILE DEFAULT LIMIT IDLE_TIME n` Set the value to greater than or equal to the  WebSphere Application Server timeout.|\n|`LOG_BUFFER`|Specifies the amount of memory in bytes that Oracle uses when buffering redo entries to a redo log file. The database chooses an appropriate default based on the server specification. In our tests, we set this parameter with positive results for performance. Consult your database administrator to determine whether setting this parameter is appropriate in your environment.|<InlineNotification kind=\"warning\">**Note:** In newer releases of Oracle, **do not** set `LOG_BUFFER`. </InlineNotification>|\n|`DB_CACHE_SIZE`|Use the DB cache advisor (`V$DB_CACHE_ADVICE view`) to see whether any benefit can be gained from increasing the size of the buffer cache. Consult your database administrator to determine whether setting this parameter is appropriate in your environment.|No recommendation because the parameter is system-dependent.|\n|`TABLESPACE DATAFILES`|More data files results in less write contention. Consult your database administrator to determine whether setting this parameter is appropriate in your environment.|No recommendation because the parameter is system-dependent.|\n\n## Statistics\n\nThe database optimizer relies on database statistics to determine which indexes are used for data access.\nIf the database statistics are not up-to-date, the correct indexes might not be used. In this case, the performance\nof the system degrades, and at worst the system becomes unstable. It is important to ensure that database statistics\nare run and gathered frequently. The general convention is that database statistics are gathered on a table when 10%\nor more of the data on that table changes. Typical examples in SPM are to run statistic in the early life of the system and after some batch job executions.\n\nMore specifically, initially many tables in the SPM database are empty or have a low number of rows. Therefore, before you turn on a production or test system,\nyou must run and gather database statistics. During the first hours and days that the system is used, run and gather database statistics often, at least daily.\n","type":"Mdx","contentDigest":"6839a9972faf480831e921e0657a724a","owner":"gatsby-plugin-mdx","counter":127},"frontmatter":{"title":"Oracle","description":"Oracle","tabs":["Common","Db2","Oracle"]},"exports":{},"rawBody":"---\ntitle: Oracle\ndescription: Oracle\ntabs: ['Common','Db2','Oracle']\n---\n\n<AnchorLinks small>\n  <AnchorLink>Physical database design</AnchorLink>\n  <AnchorLink>Initialization and tuning parameters for Oracle databases</AnchorLink>\n  <AnchorLink>Statistics</AnchorLink>\n</AnchorLinks>\n\nThe following maintenance and database design guidelines apply to tuning Oracle databases.\n\n<InlineNotification kind=\"warning\">\n\nDatabase tuning provided in this guidance is not comprehensive.\n\nHowever, the following values are a starting point for how to configure a performant database for IBM® Cúram Social Program Management.\nIt is our recommendation that project teams verify their own tuning, and where necessary adapt and expand the configuration based on their own requirements prior to going in to production.\n\n</InlineNotification>\n\n## Physical database design\n\nIn addition to physical database design that is done as part of the project, experience shows that the database\ndesign has benefits in reducing contention on hot index blocks (cache buffer chain). To achieve this benefit, create\na 2 K block table space for indexes, and move indexes to that 2 K block index table space.\n\n## Initialization and tuning parameters for Oracle databases\n\nThe application server for IBM® Cúram Social Program Management uses JDBC connection pooling and prepared statement caching.\nAt bare minimum, review and adjust the `PROCESSES` and `OPEN_CURSORS` parameters from the following list according to your system requirements.\n\nYou can use the following guidance when you are deciding which values to apply for `PROCESSES` and `OPEN_CURSORS` on your system.\nIn addition to these two basic parameters, check the parameters that are referenced in the following table, and adjust the parameters if necessary.\n\n### PROCESSES\n\n`PROCESSES` specifies the maximum number of operating system user processes that can simultaneously connect to Oracle.\nIts value must allow for all background processes such as locks, job queue processes, and parallel execution processes.\nThis parameter is operating system dependent. The default values of the `SESSIONS` and `TRANSACTIONS` parameters are derived\nfrom this parameter. If you change the value of `PROCESSES`, evaluate whether to adjust the values of those derived parameters.\n\nYou can use the following guidance to set a value for `PROCESSES`:\n\n```sql\nPROCESSES > MAX\n```\n\nwhere\n\n```sql\nMAX=NUMBER OF APPLICATION SERVERS * NUMBER OF POOLED JDBC CONNECTIONS\n```\n\nor\n\n```sql\nMAX=NUMBER OF BATCH STREAMS * 3\n```\n\n<InlineNotification>\n\n**Note:** Increasing the number of processes leads to greater memory consumption. Consult with your database administrator before you make any changes.\n\n</InlineNotification>\n\n### OPEN_CURSORS\n\nOracle creates a memory area (context area) for processing SQL statements. The value of `OPEN_CURSORS` must\nbe set high enough to prevent your application from running out of open cursors. Assuming that a session does\nnot open the number of cursors that are specified by `OPEN_CURSORS`, there is no added overhead to setting\nthis value higher than needed. The following guidance can be used to set a value for `OPEN_CURSORS`:\n\n```sql\nOPEN_CURSORS >= NUMBER OF OVERALL EXPECTED DBCONNECTIONS\n```\n\nor\n\n```sql\nOPEN_CURSORS > JDBC/CURAMDB PREPARED STATEMENT CACHE SIZE\n```\n\n### SESSIONS\n\nThis parameter modifies the number of sessions that are allowed by Oracle at database level.\n\n<InlineNotification>\n\n**Note:** Setting the number of allowed processes automatically sets the appropriate number of sessions, which is the\nrecommended way of tuning this parameter. Oracle does not recommend setting this parameter explicitly.\n\n</InlineNotification>\n\n### EVENTS\n\nThis parameter is used to reduce contention that is caused by LOB management. To identify the number of chunks to\nbe cleaned up each time a reclamation operation is performed, set `EVENT 44951` to a value in the range `1 - 1024`.\nIn turn, this parameter reduces the number of requests against the high watermark enqueue.\n\n### DB_BLOCK_SIZE\n\nThis parameter controls the size of the default data block size at the time of database creation. If the database exists,\nthis value cannot be changed: a new database needs to be created with a different block size. Since Oracle 10g Release 2,\neach table space can have a different block size.\n\nHowever, the block size still needs to be chosen wisely. Performance tests showed that decreasing the block size decreases threads contention. The `DB_BLOCK_SIZE` default value is `8192`. The value of this parameter must be a multiple of the physical block size at the device level.\n\nOur suggestion is to set the parameter to the lowest possible value.\n\n### DISK_ASYNCH_IO\n\nMuch CPU time can be wasted on asynchronous I/O on systems that support it. We suggest setting the `DISK_ASYNCH_IO` parameter to `FALSE`.\n\n<InlineNotification>\n\n**Note:** With `DISK_ASYNCH_IO` off, you should set the `DBWR_IO_SLAVES` parameter to a value other than its default of `0`, to simulate asynchronous I/O.\n\n</InlineNotification>\n\n### DBWR_IO_SLAVES\n\nThis parameter is relevant only on systems with only one database writer process (`DBW0`). It specifies the number of I/O\nserver processes that are used by the `DBW0` process. The `DBW0` process and its server processes always write to disk.\nBy default, the value is `0` and I/O server processes are not used. `DBWR_IO_SLAVES` should be set and tuned when\nsimulating asynchronous I/O, for example, with `DISK_ASYNCH_IO=FALSE`. Performance tests have shown that\nsetting `DBWR_IO_SLAVE` to `20` yields good performance.\n\nIn addition to the parameters mentioned previously, a number of other important Oracle tuning parameters are available\nthat you can review and adjust, if necessary. The following table summarizes the tuneable parameters.\n\n<Caption>\n\n*Table 1:* Oracle tuning parameters\n\n</Caption>\n\n| Tuning parameter  | Description and use  | Recommended value |\n| :---------------- | :------------------- | :----------------- |\n|`PROCESSES`|Specifies the maximum number of operating system user processes that can simultaneously connect to Oracle|`PROCESSES > MAX` where `MAX=NUMBER OF APPLICATION SERVERS * NUMBER OF POOLED JDBC CONNECTIONS` or  `MAX=NUMBER OF BATCH STREAMS * 3`|\n|`SESSIONS`|Modifies the number of sessions that are allowed by Oracle at database level.|<InlineNotification kind=\"warning\"> **Note:** Setting this parameter explicitly is not recommended. </InlineNotification>|\n|`OPEN_CURSORS`|Controls the size of the memory area (context area) for processing SQL statements.|`open_cursors >= number of overall expected dbconnections` or `open_cursors > jdbc/curamdb prepared statement cache size`|\n|`EVENTS`|Set to reduce contention caused by LOB management.|`SET EVENTS ='44951 TRACE NAME CONTEXT FOREVER, LEVEL 1024'`|\n|`DB_BLOCK_SIZE`|Controls the size of the default data block size at the time of database creation.|Set to the lowest possible value (2048): `DB_BLOCK_SIZE = 2048`|\n|`FAST_START_MTTR_TARGET`|Specifies the number of seconds that the database takes to perform crash recovery of a single instance. `FAST_START_MTTR_TARGET=60` for approximately 100 MB files. `FAST_START_MTTR_TARGET=300` for approximately 500 MB files. Check the size of log files with: `select * from V$LOG`|`FAST_START_MTTR_TARGET=300`|\n|`DISK_ASYNCH_IO`|Controls whether I/O to data files, control files, and log files is asynchronous.|`DISK_ASYNCH_IO=false`|\n|`DBWR_IO_SLAVES`|Specifies the number of I/O server processes that are used by the DBW0 process.|`DBWR_IO_SLAVES = 20`|\n|`DB_WRITER_PROCESSES`|`DB_WRITER_PROCESSES` (DBWR) manages the \"dirty block\" cleanouts from the data buffer. Very few tuning options exist except adjusting the number of DBWR processes.`DB_WRITER_PROCESSES` cannot exceed a value of 20.|The default value is the larger value of either: `DB_WRITER_PROCESSES = 1` or `CPU_COUNT/8`|\n|`IDLE_TIME`|Set to greater or equal to the timeout that is set on WebSphere® Application Server.|`ALTER PROFILE DEFAULT LIMIT IDLE_TIME n` Set the value to greater than or equal to the  WebSphere Application Server timeout.|\n|`LOG_BUFFER`|Specifies the amount of memory in bytes that Oracle uses when buffering redo entries to a redo log file. The database chooses an appropriate default based on the server specification. In our tests, we set this parameter with positive results for performance. Consult your database administrator to determine whether setting this parameter is appropriate in your environment.|<InlineNotification kind=\"warning\">**Note:** In newer releases of Oracle, **do not** set `LOG_BUFFER`. </InlineNotification>|\n|`DB_CACHE_SIZE`|Use the DB cache advisor (`V$DB_CACHE_ADVICE view`) to see whether any benefit can be gained from increasing the size of the buffer cache. Consult your database administrator to determine whether setting this parameter is appropriate in your environment.|No recommendation because the parameter is system-dependent.|\n|`TABLESPACE DATAFILES`|More data files results in less write contention. Consult your database administrator to determine whether setting this parameter is appropriate in your environment.|No recommendation because the parameter is system-dependent.|\n\n## Statistics\n\nThe database optimizer relies on database statistics to determine which indexes are used for data access.\nIf the database statistics are not up-to-date, the correct indexes might not be used. In this case, the performance\nof the system degrades, and at worst the system becomes unstable. It is important to ensure that database statistics\nare run and gathered frequently. The general convention is that database statistics are gathered on a table when 10%\nor more of the data on that table changes. Typical examples in SPM are to run statistic in the early life of the system and after some batch job executions.\n\nMore specifically, initially many tables in the SPM database are empty or have a low number of rows. Therefore, before you turn on a production or test system,\nyou must run and gather database statistics. During the first hours and days that the system is used, run and gather database statistics often, at least daily.\n","fileAbsolutePath":"/home/travis/build/IBM/spm-performance-tuning/src/pages/common_task/dbconfig/oracle.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2610115429","2746626797","3037994772","768070550"]}