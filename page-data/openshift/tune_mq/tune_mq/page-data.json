{
    "componentChunkName": "component---src-pages-openshift-tune-mq-tune-mq-mdx",
    "path": "/openshift/tune_mq/tune_mq/",
    "result": {"pageContext":{"frontmatter":{"title":"Tuning the MQ pods","description":"Tuning the MQ pods"},"relativePagePath":"/openshift/tune_mq/tune_mq.mdx","titleType":"page","MdxNode":{"id":"218a2486-10c7-5602-a607-c7750d3a5b3f","children":[],"parent":"d2dfac69-0c58-5632-8637-f9924364318e","internal":{"content":"---\ntitle: Tuning the MQ pods\ndescription: Tuning the MQ pods\n---\n\n\n<AnchorLinks small>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Pod requests and limits</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nThe following information describes how to tune the resources of the MQ pods for each SPM application (for example, `curam`, `rest`, etc.).\n\nAs independent from each other, the SPM applications generally require flexibility in specifying tuning settings which is achieved with the `global.apps.config.<applicationID>.mqTuning` values.\n\nFor additional information about MQ performance, tuning and sizing please refer to [MQ Performance documents](http://ibm-messaging.github.io/mqperf/).\n\n## Pod requests and limits\n\nThe MQ pod `cpu` and `memory` resource requests and limits can be specified by setting `cpu`: and `memory`: values for the `global.apps.config.<applicationID>.mqTuning.resources.requests` and `global.apps.config.<applicationID>.mqTuning.resources.limits` keys,\nwhich is replaced by the lower-case EAR file basename.\n\nFor example, the following configuration illustrates how to set the MQ pods of the `curam` application to have resources requests for the `cpu` of 1 and a `memory` of 1024Mi, and resources limits for the `cpu` of 1 and a `memory` of 1024Mi,\nwhile setting the MQ pods of the `rest` application to have resources requests for the `cpu` of 1 and a `memory` of 1024Mi, and resources limits for the `cpu` of 1 and a `memory` of 1024Mi:\n\n```yaml\n# Resource limits for the MQ pods of the Curam and Rest application\nglobal:\n  apps:\n    config:\n      curam:\n        mqTuning:\n          resources:\n            requests:\n              cpu: 1\n              memory: 1024Mi\n            limits:\n              cpu: 1\n              memory: 1024Mi\n        ...\n      rest:\n        mqTuning:\n          resources:\n            requests:\n              cpu: 1\n              memory: 1024Mi\n            limits:\n              cpu: 1\n              memory: 1024Mi\n        ...\n```\n\n<InlineNotification kind=\"warning\">\n\nFor the Guaranteed QoS, SPM highly recommends that a pod must have **both** CPU and Memory requests and limits set to equal values. If requests & limits are different for a given pod, it would be eligible for rescheduling in case of resource pressure on its node.\n\nFor more information please review [Configure Quality of Service for Pods](https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/#create-a-pod-that-gets-assigned-a-qos-class-of-guaranteed).\n\n</InlineNotification>\n","type":"Mdx","contentDigest":"79247bd4db0479e3c1f889878ab5d3d5","owner":"gatsby-plugin-mdx","counter":131},"frontmatter":{"title":"Tuning the MQ pods","description":"Tuning the MQ pods"},"exports":{},"rawBody":"---\ntitle: Tuning the MQ pods\ndescription: Tuning the MQ pods\n---\n\n\n<AnchorLinks small>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Pod requests and limits</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nThe following information describes how to tune the resources of the MQ pods for each SPM application (for example, `curam`, `rest`, etc.).\n\nAs independent from each other, the SPM applications generally require flexibility in specifying tuning settings which is achieved with the `global.apps.config.<applicationID>.mqTuning` values.\n\nFor additional information about MQ performance, tuning and sizing please refer to [MQ Performance documents](http://ibm-messaging.github.io/mqperf/).\n\n## Pod requests and limits\n\nThe MQ pod `cpu` and `memory` resource requests and limits can be specified by setting `cpu`: and `memory`: values for the `global.apps.config.<applicationID>.mqTuning.resources.requests` and `global.apps.config.<applicationID>.mqTuning.resources.limits` keys,\nwhich is replaced by the lower-case EAR file basename.\n\nFor example, the following configuration illustrates how to set the MQ pods of the `curam` application to have resources requests for the `cpu` of 1 and a `memory` of 1024Mi, and resources limits for the `cpu` of 1 and a `memory` of 1024Mi,\nwhile setting the MQ pods of the `rest` application to have resources requests for the `cpu` of 1 and a `memory` of 1024Mi, and resources limits for the `cpu` of 1 and a `memory` of 1024Mi:\n\n```yaml\n# Resource limits for the MQ pods of the Curam and Rest application\nglobal:\n  apps:\n    config:\n      curam:\n        mqTuning:\n          resources:\n            requests:\n              cpu: 1\n              memory: 1024Mi\n            limits:\n              cpu: 1\n              memory: 1024Mi\n        ...\n      rest:\n        mqTuning:\n          resources:\n            requests:\n              cpu: 1\n              memory: 1024Mi\n            limits:\n              cpu: 1\n              memory: 1024Mi\n        ...\n```\n\n<InlineNotification kind=\"warning\">\n\nFor the Guaranteed QoS, SPM highly recommends that a pod must have **both** CPU and Memory requests and limits set to equal values. If requests & limits are different for a given pod, it would be eligible for rescheduling in case of resource pressure on its node.\n\nFor more information please review [Configure Quality of Service for Pods](https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/#create-a-pod-that-gets-assigned-a-qos-class-of-guaranteed).\n\n</InlineNotification>\n","fileAbsolutePath":"/home/travis/build/IBM/spm-performance-tuning/src/pages/openshift/tune_mq/tune_mq.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2610115429","2746626797","3037994772","768070550"]}