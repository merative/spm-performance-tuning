"use strict";(self.webpackChunkspm_performance_tuning=self.webpackChunkspm_performance_tuning||[]).push([[6085],{7498:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return s},default:function(){return m}});var a=n(3366),r=(n(7294),n(4983)),o=n(4295),i=["components"],s={},l={_frontmatter:s},c=o.Z;function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)(c,Object.assign({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The application server settings for Java Message Service (JMS), which include connection factory and activation specification settings,\ncan affect performance. You must tune both the connection factory settings and the activation specification settings."),(0,r.kt)("p",null,"The client of a connection factory is the application. The application uses the connection factory to push or pull messages\nto or from the messaging engine through a queue. The client of an activation specification is the Enterprise JavaBeans (EJB) container.\nThe EJB container obtains an activation specification to register a ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageEndpointFactory")," for the message driven bean (MDB) with a ResourceAdapter."),(0,r.kt)("p",null,"When a client pushes a message to the messaging engine, the messaging engine uses the registered ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageEndpointFactory"),"\nto forward the message to the application, for example, the MDB. Then, the application asynchronously receives messages,\nrather than requiring the client to poll or block by trying to pull a message from the queue."),(0,r.kt)("h2",null,"Connection factory: jms/CuramConnectionQueueFactory"),(0,r.kt)("p",null,"Similar to the ",(0,r.kt)("inlineCode",{parentName:"p"},"jdbc/curamsibdb")," data source, size the connection pool for the ",(0,r.kt)("inlineCode",{parentName:"p"},"jms/CuramConnectionQueueFactory"),"\nconnection factory by using the following formula:"),(0,r.kt)("br",null),(0,r.kt)("strong",null,"WebSphere"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"max_connections = WebContainer_max_threads + SIBJMSRAThreadPool_max_threads + 1\n")),(0,r.kt)("br",null),(0,r.kt)("strong",null,"WebLogic"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"max_connections = default_max_thread_constraint + MDBWorkManager_Max_thread_constraint +1\n")),(0,r.kt)("p",null,"To prevent the processing cost of pool growth and shrinkage, it is suggested to set ",(0,r.kt)("inlineCode",{parentName:"p"},"min_connections = max_connections"),"."),(0,r.kt)("h2",null,"WebSphere - activation specifications"),(0,r.kt)("p",null,"Tune the maximum concurrent end points for the JMS activation specifications for the SPM queues. The settings define\nhow many EJB MDBs are available to process JMS messages. Asynchronous processing concurrency in the application server\nis limited by the lower of the number of either ",(0,r.kt)("inlineCode",{parentName:"p"},"MDBs")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"SIBJMSRAThreadPool")," threads."),(0,r.kt)("p",null,"Set the maximum concurrent end points for the SPM error queues to 1. This setting is suggested because errors are not expected at high volume."),(0,r.kt)("p",null,"This sizing applies to the following activation specifications:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DPError")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WorkflowError")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CuramDeadMessageQueue"))),(0,r.kt)("p",null,"Then, for simplicity, use the following formulas to set the maximum concurrent end points for the three main SPM queues:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"max_end_points_DPEnactment = SIBJMSRAThreadPool_max_threads\nmax_end_points_WorkflowEnactment = SIBJMSRAThreadPool_max_threads\nmax_end_points_WorkflowActivity = SIBJMSRAThreadPool_max_threads\n")),(0,r.kt)("p",null,"The previous formulas effectively simplify tuning for asynchronous processing by creating a single point for tuning,\nwhich is the number of JMS threads. However, if more granular tuning is required, you can decrease the concurrent end points,\nfor either SPM Deferred Processing or Workflow."),(0,r.kt)("h2",null,"WebLogic - message driven beans"),(0,r.kt)("p",null,"In WebLogic, the number of EJB MDBs is set in the ",(0,r.kt)("inlineCode",{parentName:"p"},"-ejb-jar.xml")," deployment descriptor. The descriptor also associates\nMDBs with the MDBWorkManager, as shown in the following example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<weblogic-enterprise-bean>\n    ...\n    <message-driven-descriptor>\n    <pool>\n        <max-beans-in-free-pool>3</max-beans-in-free-pool>\n        <initial-beans-in-free-pool>3</initial-beans-in-free-pool>\n    </pool>\n    </message-driven-descriptor>\n    ...\n    <dispatch-policy>MDBWorkManager</dispatch-policy>\n</weblogic-enterprise-bean>\n\n")),(0,r.kt)("p",null,"Set both the maximum and initial values of the beans in the free pool for the SPM error MDBs to 1. This setting is suggested\nbecause errors are not expected at high volume, and it applies to the ",(0,r.kt)("inlineCode",{parentName:"p"},"DPErrorMDB")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"WorkflowErrorMDB")," beans."),(0,r.kt)("p",null,"Then, for simplicity, use the following formulas to set both the maximum and initial values of the beans in the free pool for the three main SPM MDBs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"beans_in_free_pool_DPEnactmentMDB=MDBWorkManager_max_thread_constraint\nbeans_in_free_pool_WorkflowEnactmentMDB=MDBWorkManager_max_thread_constraint\nbeans_in_free_pool_WorkflowActivityMDB=MDBWorkManager_max_thread_constraint\n\n")),(0,r.kt)("p",null,"The previous formulas effectively simplify tuning for asynchronous processing by creating a single point for tuning,\nwhich is the number of JMS threads. However, if more granular tuning is required, you can decrease the beans in the free pool,\nfor either SPM Deferred Processing or Workflow."))}m.isMDXComponent=!0},4295:function(e,t,n){n.d(t,{Z:function(){return y}});var a=n(7294),r=n(8650),o=n.n(r),i=n(5444),s=n(5426),l=n(1551),c=n(5900),m=n.n(c),p=function(e){var t,n=e.title,r=e.theme,o=e.tabs,i=void 0===o?[]:o;return a.createElement("div",{className:m()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=i.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===r,t))},a.createElement("div",{className:"bx--grid"},a.createElement("div",{className:"bx--row"},a.createElement("div",{className:"bx--col-lg-12"},a.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},n)))))},u=function(e){var t=e.relativePagePath,n=e.repository,r=(0,i.useStaticQuery)("1364590287").site.siteMetadata.repository,o=n||r,s=o.baseUrl,l=o.subDirectory,c=s+"/edit/"+o.branch+l+"/src/pages"+t;return s?a.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},a.createElement("div",{className:"bx--col"},a.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},d=n(4275),h=n(1721),g=function(e){function t(){return e.apply(this,arguments)||this}return(0,h.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,n=e.tabs,r=e.slug,s=r.split("/").filter(Boolean).slice(-1)[0],l=n.map((function(e){var t,n=o()(e,{lower:!0,strict:!0}),l=n===s,c=new RegExp(s+"/?(#.*)?$"),p=r.replace(c,n);return a.createElement("li",{key:e,className:m()((t={},t["PageTabs-module--selected-item--aBB0K"]=l,t),"PageTabs-module--list-item--024o6")},a.createElement(i.Link,{className:"PageTabs-module--link--Kz-7R",to:""+p},e))}));return a.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},a.createElement("div",{className:"bx--grid"},a.createElement("div",{className:"bx--row"},a.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},a.createElement("nav",{"aria-label":t},a.createElement("ul",{className:"PageTabs-module--list--xLqxG"},l))))))},t}(a.Component),f=g,b=n(2881),k=n(6958),v=n(36),_=function(e){var t=e.date,n=new Date(t);return t?a.createElement(v.X2,{className:"last-modified-date-module--row--XJoYQ"},a.createElement(v.sg,null,a.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",n.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},y=function(e){var t=e.pageContext,n=e.children,r=e.location,c=e.Title,m=t.frontmatter,h=void 0===m?{}:m,g=t.relativePagePath,v=t.titleType,y=h.tabs,E=h.title,M=h.theme,x=h.description,w=h.keywords,N=h.date,P=(0,k.Z)().interiorTheme,B=(0,i.useStaticQuery)("2456312558").site.pathPrefix,T=B?r.pathname.replace(B,""):r.pathname,D=y?T.split("/").filter(Boolean).slice(-1)[0]||o()(y[0],{lower:!0}):"",S=M||P;return a.createElement(l.Z,{tabs:y,homepage:!1,theme:S,pageTitle:E,pageDescription:x,pageKeywords:w,titleType:v},a.createElement(p,{title:c?a.createElement(c,null):E,label:"label",tabs:y,theme:S}),y&&a.createElement(f,{title:E,slug:T,tabs:y,currentTab:D}),a.createElement(b.Z,{padded:!0},n,a.createElement(u,{relativePagePath:g}),a.createElement(_,{date:N})),a.createElement(d.Z,{pageContext:t,location:r,slug:T,tabs:y,currentTab:D}),a.createElement(s.Z,null))}}}]);
//# sourceMappingURL=component---src-pages-tuneappserver-jms-settings-mdx-880a9053f3b3b5933464.js.map